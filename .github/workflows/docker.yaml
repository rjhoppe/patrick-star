name: docker

on:
  push:
    branches: [main, master]

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (enables building multi-platform images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }} # Only push on merge to main/master
          tags: ${{ secrets.DOCKER_USERNAME }}/patrick-star:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Send success notification to Discord
        if: success()
        env:
          WEBHOOK: ${{ secrets.WEBHOOK }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}
          BRANCH: ${{ github.ref }}
          SHA: ${{ github.sha }}
        run: |
          cat <<EOF > payload.json
          {
            "content": "ðŸš€ patrick-star successfully updated!",
            "embeds": [{
              "title": "Commit Details",
              "description": "The Docker build was successful. Here's the commit message:",
              "fields": [
                {
                  "name": "Commit Message",
                  "value": "${COMMIT_MSG}",
                  "inline": false
                },
                {
                  "name": "Branch",
                  "value": "${BRANCH}",
                  "inline": true
                },
                {
                  "name": "Commit SHA",
                  "value": "${SHA}",
                  "inline": true
                }
              ]
            }]
          }
          EOF
          curl -X POST -H "Content-Type: application/json" -d @payload.json "$WEBHOOK"
