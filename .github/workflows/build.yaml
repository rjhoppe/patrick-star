name: build

on:
  pull_request:
    branches: ["main", "master"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-buildx-${{ github.sha }}" >> $GITHUB_OUTPUT

      # Step 2: Set up Docker Buildx (to use BuildKit for better caching and features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: patrick-star:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=docker

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test container start
        env:
          URL: ${{ secrets.URL }}
          STORE_PAGE1: ${{ secrets.STORE_PAGE1 }}
          STORE_PAGE2: ${{ secrets.STORE_PAGE2 }}
          STORE_PAGE3: ${{ secrets.STORE_PAGE3 }}
          STORE_PAGE4: ${{ secrets.STORE_PAGE4 }}
          STORE_PAGE5: ${{ secrets.STORE_PAGE5 }}
          NTFY_URL: ${{ secrets.NTFY_URL }}
          WEBHOOK: ${{ secrets.WEBHOOK }}
        run: |
          docker run --name test-container \
            -e URL=${URL} \
            -e STORE_PAGE1=${STORE_PAGE1} \
            -e STORE_PAGE2=${STORE_PAGE2} \
            -e STORE_PAGE3=${STORE_PAGE3} \
            -e STORE_PAGE4=${STORE_PAGE4} \
            -e STORE_PAGE5=${STORE_PAGE5} \
            -e NTFY_URL=${NTFY_URL} \
            -e WEBHOOK=${WEBHOOK} \
            -d patrick-star:test
          EXIT_CODE=$?

          echo "Container exited with code: $EXIT_CODE"
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: Verify container ran successfully
        run: |
          EXIT_CODE=${{ steps.run_container.outputs.exit_code }}
          # Check if the container exited successfully (code 0)
          if [ "$EXIT_CODE" -eq 0 ]; then
            echo "✅ Container executed successfully"
          else
            echo "❌ Container failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Cleanup Docker resources
        if: always() # This ensures cleanup happens even if previous steps fail
        run: |
          docker rm -f test-container || true
          docker image rm patrick-star || true

  update:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (enables building multi-platform images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: rickjhoppe/patrick-star:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
